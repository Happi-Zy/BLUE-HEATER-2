-- Load Libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Player
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Variables
local myPlot = nil
local enemiesFolder = nil
local farming = false
local killaura = false
local lockOnMode = false
local currentTarget = nil
local enemyIndex = 1

-- Auto Buy Variables
local autoBuyCrates = false
local autoBuyBlocks = false
local selectedCrates = {}
local selectedBlocks = {}
local buyDelay = 1

-- Event Variables
local autoSubmitLunar = false

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Build A Base",
    SubTitle = "by Kapao",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tab = Window:AddTab({ Title = "Main", Icon = "file-json-2" })
local ShopTab = Window:AddTab({ Title = "Auto Buy", Icon = "banknote" })
local EventTab = Window:AddTab({ Title = "Events", Icon = "calendar" })
local SettingsTab = Window:AddTab({ Title = "Settings", Icon = "settings" })

-- Find Plot
local function findPlot()
    local Plots = workspace:WaitForChild("Plots")
    for _, plot in pairs(Plots:GetChildren()) do
        local owner = plot:GetAttribute("Owner_UserID") or plot:GetAttribute("Owner_UserId")
        if owner and tostring(owner) == tostring(player.UserId) then
            return plot
        end
    end
    return nil
end

-- Setup Plot
local function setupPlot()
    myPlot = findPlot()
    if not myPlot then
        Fluent:Notify({
            Title = "Error",
            Content = "No plot found!",
            Duration = 3
        })
        return false
    end
    
    enemiesFolder = myPlot:WaitForChild("Enemies") -- Will wait infinitely
    
    Fluent:Notify({
        Title = "Success",
        Content = "Plot: " .. myPlot.Name,
        Duration = 3
    })
    return true
end

-- Check if enemy is valid
local function isValidEnemy(enemy)
    return enemy and enemy.Parent and enemy:FindFirstChild("HumanoidRootPart") 
    and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0
end

-- Get all enemies
local function getEnemies()
    if not enemiesFolder then return {} end
    
    local enemies = {}
    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        if isValidEnemy(enemy) then
            table.insert(enemies, enemy)
        end
    end
    return enemies
end

-- Get nearest enemy
local function getNearestEnemy()
    if not enemiesFolder or not hrp then return nil end
    
    local nearest = nil
    local shortestDistance = math.huge
    
    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        if isValidEnemy(enemy) then
            local distance = (enemy.HumanoidRootPart.Position - hrp.Position).Magnitude
            if distance < shortestDistance then
                nearest = enemy
                shortestDistance = distance
            end
        end
    end
    
    return nearest
end

-- Auto Buy Functions
local function buyCrate(crateName)
    pcall(function()
        local args = {
            "Crates",
            crateName
        }
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Functions"):WaitForChild("BuyStock"):InvokeServer(unpack(args))
    end)
end

local function buyBlock(blockName)
    pcall(function()
        local args = {
            "Blocks",
            blockName
        }
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Functions"):WaitForChild("BuyStock"):InvokeServer(unpack(args))
    end)
end

-- Submit Lunar Points
local function submitLunarPoints()
    pcall(function()
        local args = {"LunarEclipse"}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Functions"):WaitForChild("ProgressEventSubmit"):InvokeServer(unpack(args))
    end)
end

-- Main Tab Section
Tab:AddSection("Combat")

Tab:AddToggle("KillAura", {
    Title = "Kill Aura",
    Description = "Auto swing weapon",
    Default = false,
    Callback = function(value)
        killaura = value
    end
})

Tab:AddSection("Farming")

Tab:AddToggle("AutoFarm", {
    Title = "Auto Farm",
    Description = "Teleport to enemies",
    Default = false,
    Callback = function(value)
        farming = value
        if farming then
            -- Always refresh when turning on
            character = player.Character
            if character then
                hrp = character:WaitForChild("HumanoidRootPart")
            end
            setupPlot()
        end
    end
})

Tab:AddToggle("LockOn", {
    Title = "Lock-On Mode",
    Description = "Stay on one enemy until dead",
    Default = false,
    Callback = function(value)
        lockOnMode = value
        currentTarget = nil
    end
})

-- Shop Tab - Multi Crates
ShopTab:AddSection("Crates")

local CrateMultiDropdown = ShopTab:AddDropdown("CrateMultiSelect", {
    Title = "Select Crates",
    Description = "Choose multiple crates to auto buy",
    Values = {"WoodenCrate", "IronCrate", "GoldCrate", "ElectroCrate"},
    Multi = true,
    Default = {"WoodenCrate"},
})

CrateMultiDropdown:OnChanged(function(Value)
    selectedCrates = {}
    for crateName, isSelected in pairs(Value) do
        if isSelected then
            table.insert(selectedCrates, crateName)
        end
    end
end)

ShopTab:AddToggle("AutoBuyCrates", {
    Title = "Auto Buy Crates",
    Description = "Automatically purchase selected crates",
    Default = false,
    Callback = function(value)
        autoBuyCrates = value
    end
})

-- Shop Tab - Multi Blocks
ShopTab:AddSection("Blocks")

local BlockMultiDropdown = ShopTab:AddDropdown("BlockMultiSelect", {
    Title = "Select Blocks",
    Description = "Choose multiple blocks to auto buy",
    Values = {"Crossbow","Turret","Spikes", "StoneSpikes", "MetalSpikes", "DoubleTurret", "Flamethrower", "MinigunTurret"},
    Multi = true,
    Default = {"Crossbow"},
})

BlockMultiDropdown:OnChanged(function(Value)
    selectedBlocks = {}
    for blockName, isSelected in pairs(Value) do
        if isSelected then
            table.insert(selectedBlocks, blockName)
        end
    end
end)

ShopTab:AddToggle("AutoBuyBlocks", {
    Title = "Auto Buy Blocks",
    Description = "Automatically purchase selected blocks",
    Default = false,
    Callback = function(value)
        autoBuyBlocks = value
    end
})

-- Event Tab
EventTab:AddSection("Lunar Eclipse")

EventTab:AddToggle("AutoSubmitLunar", {
    Title = "Auto Submit Lunar Points",
    Description = "Automatically submit lunar points",
    Default = false,
    Callback = function(value)
        autoSubmitLunar = value
        if value then
            Fluent:Notify({
                Title = "Lunar Auto Submit",
                Content = "Submitting lunar points",
                Duration = 2
            })
        end
    end
})

EventTab:AddButton({
    Title = "Submit Lunar Points Once",
    Description = "Manually submit lunar points",
    Callback = function()
        submitLunarPoints()
        Fluent:Notify({
            Title = "Lunar Points",
            Content = "Submitted!",
            Duration = 2
        })
    end
})

-- Settings Tab
SettingsTab:AddSection("Auto Buy Settings")

local BuyDelaySlider = SettingsTab:AddSlider("BuyDelay", {
    Title = "Buy Delay",
    Description = "Delay between purchases (seconds)",
    Default = 1,
    Min = 0.5,
    Max = 5,
    Rounding = 1,
    Callback = function(Value)
        buyDelay = Value
    end
})

SettingsTab:AddSection("GUI Settings")

SettingsTab:AddButton({
    Title = "Rejoin Server",
    Description = "Rejoin the current server",
    Callback = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end
})

-- Kill Aura Loop
spawn(function()
    while task.wait(0.05) do
        if killaura then
            pcall(function()
                ReplicatedStorage.Remotes.Events.ToolState:FireServer(true)
            end)
        end
    end
end)

-- Auto Buy Crates Loop
spawn(function()
    while task.wait(buyDelay) do
        if autoBuyCrates and #selectedCrates > 0 then
            for _, crateName in ipairs(selectedCrates) do
                buyCrate(crateName)
                task.wait(0.1) -- Small delay between different items
            end
        end
    end
end)

-- Auto Buy Blocks Loop
spawn(function()
    while task.wait(buyDelay) do
        if autoBuyBlocks and #selectedBlocks > 0 then
            for _, blockName in ipairs(selectedBlocks) do
                buyBlock(blockName)
                task.wait(0.1) -- Small delay between different items
            end
        end
    end
end)

-- Auto Submit Lunar Points Loop
spawn(function()
    while task.wait(2) do -- Submit every 2 seconds
        if autoSubmitLunar then
            submitLunarPoints()
        end
    end
end)

-- Auto Farm Loop
spawn(function()
    while task.wait() do
        if farming and enemiesFolder then
            pcall(function()
                -- Check character
                if not character or not character.Parent then
                    character = player.Character
                    if character then
                        hrp = character:WaitForChild("HumanoidRootPart")
                    end
                    return
                end
                
                if lockOnMode then
                    -- Lock-On: Stay on one enemy
                    if not isValidEnemy(currentTarget) then
                        currentTarget = getNearestEnemy()
                    end
                    
                    if currentTarget then
                        hrp.CFrame = currentTarget.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                    end
                else
                    -- Loop: Cycle through enemies
                    local enemies = getEnemies()
                    
                    if #enemies > 0 then
                        if enemyIndex > #enemies then
                            enemyIndex = 1
                        end
                        
                        local enemy = enemies[enemyIndex]
                        if enemy then
                            hrp.CFrame = enemy.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                            enemyIndex = enemyIndex + 1
                        end
                    else
                        -- No enemies, reset index
                        enemyIndex = 1
                    end
                end
            end)
        end
    end
end)

-- Handle Respawn
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
    currentTarget = nil
    enemyIndex = 1
    
    task.wait(2)
    if farming then
        setupPlot()
    end
end)

-- Anti-AFK
local vu = game:GetService("VirtualUser")
player.Idled:Connect(function()
    vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- Setup
task.wait(1)
setupPlot()

-- Select Main Tab when script loads
Window:SelectTab(1)
